/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.Manager;

import DAO.Impl.UserDImpl;
import DAO.UserD;
import DAO.UsersController;
import Entity.UserE;
import Until.XDialog;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HAPPY
 */
public class UserManagerJDialog extends javax.swing.JDialog implements UsersController {

    /**
     * Creates new form UserManagerJDialog
     */
    public UserManagerJDialog() {
        initComponents();
        setTitle("Quản lý tài khoản");
        initTableModel();
    }
    private void initTableModel() {
    DefaultTableModel model = new DefaultTableModel(
        new Object[]{"Tên đăng nhập", "Mật khẩu", "Họ tên", "Hình ảnh", "Vai trò", "Trạng thái", "Chọn"}, 0
    ) {
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return columnIndex == 6 ? Boolean.class : String.class;
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 6; // Chỉ cho phép tick checkbox
        }
    };
    tblUsers.setModel(model);
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton6 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btgService = new javax.swing.ButtonGroup();
        btgStatus = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        txtConfirm = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        rdbQuanLy = new javax.swing.JRadioButton();
        rdbNhanVien = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        rdbhd = new javax.swing.JRadioButton();
        rdbtn = new javax.swing.JRadioButton();
        btnCheckAll = new javax.swing.JButton();
        btnUnCheckAll = new javax.swing.JButton();
        btnDeleteCheckedItems = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        jButton6.setText("jButton1");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Tên Đăng Nhập");

        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Họ và tên");

        jLabel3.setText("Xác nhận mật khẩu");

        jLabel4.setText("Mật khẩu");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        txtConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtConfirmActionPerformed(evt);
            }
        });

        btnCreate.setText("Tạo mới");

        btnUpdate.setText("Cập nhật");

        btnDelete.setText("Xóa");

        btnClear.setText("Nhập mới");

        btgService.add(rdbQuanLy);
        rdbQuanLy.setText("Quản lý");

        btgService.add(rdbNhanVien);
        rdbNhanVien.setText("Nhân viên");

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Tên đăng nhâp", "Mật Khẩu", "Họ và tên", "Hình Ảnh ", "Vai trò", "Trạng thái", ""
            }
        ));
        jScrollPane2.setViewportView(tblUsers);

        btgStatus.add(rdbhd);
        rdbhd.setText("Hoạt động");

        btgStatus.add(rdbtn);
        rdbtn.setText("Tạm ngưng");

        btnCheckAll.setText("Chọn tất cả");

        btnUnCheckAll.setText("Bỏ chọn tất cả");

        btnDeleteCheckedItems.setText("Xóa các mục đã chọn");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("jLabel5");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnCreate)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(18, 18, 18)
                .addComponent(btnClear)
                .addGap(174, 174, 174))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rdbQuanLy, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdbNhanVien, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(txtFullName))
                        .addContainerGap(490, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rdbhd, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(rdbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(505, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(btnCheckAll)
                .addGap(18, 18, 18)
                .addComponent(btnUnCheckAll)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteCheckedItems)
                .addContainerGap(746, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbQuanLy)
                    .addComponent(rdbNhanVien)
                    .addComponent(rdbhd)
                    .addComponent(rdbtn))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnClear)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckAll)
                    .addComponent(btnUnCheckAll)
                    .addComponent(btnDeleteCheckedItems))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtConfirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtConfirmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UserManagerJDialog().setVisible(true);
            }
        });
    }
    
UserD dao = new UserDImpl();
List<UserE> items = new ArrayList<>();
   

    @Override
    public void open() {
    this.setLocationRelativeTo(null);
    this.fillToTable();
//    this.clear();
}

    @Override
    public void fillToTable() {
    DefaultTableModel model = (DefaultTableModel) tblUsers.getModel();
    model.setRowCount(0);
    items = dao.findAll();

    for (UserE user : items) {
        String role = user.isService() ? "Quản lý" : "Nhân viên";
        String status = user.isStatusUser()? "Hoạt động" : "Tạm dừng";

        model.addRow(new Object[]{
            user.getUsername(),
            user.getPassword(),
            user.getFullnameUser(),
            user.getPhotoUser(), // tên file
            role,
            status,
            false
        });
    }
}


    @Override
    public void checkAll() {
    setCheckedAll(true);
}

@Override
public void uncheckAll() {
    setCheckedAll(false);
}

private void setCheckedAll(boolean checked) {
    for (int i = 0; i < tblUsers.getRowCount(); i++) {
        tblUsers.setValueAt(checked, i, 6); // cột checkbox
    }
}

@Override
public void deleteCheckedItems() {
  if (XDialog.confirm("Bạn thực sự muốn xóa các mục chọn?")) {
        int deletedCount = 0;

        for (int i = 0; i < tblUsers.getRowCount(); i++) {
            Object value = tblUsers.getValueAt(i, 6); // Cột checkbox
            boolean checked = value instanceof Boolean && (Boolean) value;

            if (checked) {
                dao.deleteById((String) tblUsers.getValueAt(i, 0)); // Cột 0 là Username
                deletedCount++;
            }
        }

        fillToTable(); // Load lại bảng

        if (deletedCount > 0) {
            XDialog.alert("Đã xóa thành công " + deletedCount + " người dùng.");
        } else {
            XDialog.alert("Không có mục nào được chọn để xóa.");
        }
    }
}

@Override
public UserE getForm() {
    UserE user = new UserE();
    user.setUsername(txtUserName.getText().trim());
    user.setPassword(new String(txtPassword.getPassword()));
    user.setFullname(txtFullName.getText().trim());
    user.setPhoto("default.png"); // Cập nhật tùy logic ảnh
    user.setManager(rdbQuanLy.isSelected());
    user.setEnabled(rdbhd.isSelected());
    return user;
}

@Override
public void setForm(UserE user) {
    txtFullName.setText(user.getUsername());
    txtPassword.setText(user.getPassword());
    txtConfirmPassword.setText(user.getPassword());
    txtFullname.setText(user.getFullname());

    // Ảnh đại diện
//    String imgPath = "/poly/cafe/icon/" + user.getPhoto();
//    URL url = getClass().getResource(imgPath);
//    if (url != null) {
//        lblPhoto.setIcon(new ImageIcon(url));
//    } else {
//        lblPhoto.setIcon(new ImageIcon(getClass().getResource("/poly/cafe/icon/default.png")));
//    }

    // Vai trò
    (user.isManager() ? rdbManager : rdbEmployee).setSelected(true);
    // Trạng thái
    (user.isEnabled() ? rdbEnabled : rdbDisabled).setSelected(true);
}


@Override
public void create() {
    try {
        Users user = getForm();
        dao.create(user);
        fillToTable();
        clear();
        XDialog.alert("Tạo tài khoản thành công!");
    } catch (Exception ex) {
        XDialog.alert("Lỗi: " + ex.getMessage());
    }
}

//@Override
//public void update() {
//    try {
//        Users user = getForm();
//        dao.update(user);
//        fillToTable();
//        XDialog.alert("Cập nhật thành công!");
//    } catch (Exception ex) {
//        XDialog.alert("Lỗi: " + ex.getMessage());
//    }
//}

//@Override
//public void delete() {
//    if (XDialog.confirm("Bạn thực sự muốn xóa?")) {
//        String id = txtUsername.getText().trim();
//        if (id.isEmpty()) {
//            XDialog.alert("Vui lòng chọn tài khoản cần xóa");
//            return;
//        }
//        dao.deleteById(id);
//        fillToTable();
//        clear();
//        XDialog.alert("Xóa thành công!");
//    }
//}



//@Override
//public void clear() {
//    txtUsername.setText("");
//    txtPassword.setText("");
//    txtConfirmPassword.setText("");
//    txtFullname.setText("");
//    rdbEmployee.setSelected(true);
//    rdbEnabled.setSelected(true);
//    setEditable(false);
//}

// @Override
//public void setEditable(boolean editable) {
//    txtUsername.setEnabled(!editable);
//    btnCreate.setEnabled(!editable);
//    btnUpdate.setEnabled(editable);
//    btnDelete.setEnabled(editable);
//    int rowCount = tblUsers.getRowCount();
//    btnMoveFirst.setEnabled(editable && rowCount > 0);
//    btnMovePrevious.setEnabled(editable && rowCount > 0);
//    btnMoveNext.setEnabled(editable && rowCount > 0);
//    btnMoveLast.setEnabled(editable && rowCount > 0);
//}

//@Override
//public void edit() {
//    int row = tblUsers.getSelectedRow();
//    if (row >= 0 && row < items.size()) {
//        setForm(items.get(row));
//        setEditable(true);
//        tabs.setSelectedIndex(1);
//    } else {
//        XDialog.alert("Vui lòng chọn một bản ghi hợp lệ để chỉnh sửa");
//    }
//}



public void moveFirst() {
    moveTo(0);
}


public void movePrevious() {
    moveTo(tblUsers.getSelectedRow() - 1);
}


public void moveNext() {
    moveTo(tblUsers.getSelectedRow() + 1);
}


public void moveLast() {
    moveTo(tblUsers.getRowCount() - 1);
}


public void moveTo(int index) {
    if (tblUsers.getRowCount() == 0) {
        XDialog.alert("Không có dữ liệu để di chuyển");
        return;
    }
    if (index < 0) {
        moveLast();
    } else if (index >= tblUsers.getRowCount()) {
        moveFirst();
    } else {
        tblUsers.setRowSelectionInterval(index, index);
        edit();
    }
}   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgService;
    private javax.swing.ButtonGroup btgStatus;
    private javax.swing.JButton btnCheckAll;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCheckedItems;
    private javax.swing.JButton btnUnCheckAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton rdbNhanVien;
    private javax.swing.JRadioButton rdbQuanLy;
    private javax.swing.JRadioButton rdbhd;
    private javax.swing.JRadioButton rdbtn;
    private javax.swing.JTable tblUsers;
    private javax.swing.JTextField txtConfirm;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}


